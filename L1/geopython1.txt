def createLineGeom(pnts):
    pnt_list=[]
    for i in pnts:
        if isinstance(i, Point):
            pnt_list.append(i)
        elif isinstance(i, Tuple):
            pnt=Point(i)
            pnt_list.append(pnt)

    return LineString(pnt_list)

line1 = createLineGeom([(2.2, 4.2), (7.2, -25.1), (9.26, -2.456))

print (line1)

point1 = Point(2.2, 4.2)
point2 = Point(7.2, -25.1)
point3 = Point(9.26, -2.456)

line2 = createLineGeom([point1, point2, point3])

print (line2)


-------------------------

def createPolyGeom(lst):
    l=[]
    
    for item in lst:
        if isinstance(item, Tuple):
            pnt = Point(item)
            l.append(pnt)
        else:
            l.append(item)
 
    return Polygon([[p.x, p.y] for p in l])

pol1 = createPolyGeom([(2.2, 4.2), (7.2, -25.1), (9.26, -2.456)])
pol2 = createPolyGeom([[p.x, p.y] for p in [point1, point2, point3]])

print(pol1)
display(pol1)

print(pol2)
display(pol2)

---------------------------

def getCentroid(input):
    if isinstance(input, List):
        inp_lst=[]
        for i in input:
            if isinstance(i, Point):
                inp_lst.append(input)
        input=LineString(inp_lst)
                
    return input.centroid

print(getCentroid(point1))
print(getCentroid(point1, point2))
print(getCentroid(line1))
print(getCentroid(pol1))

--------------------------------

def getArea(input):
    if isinstance(input, Polygon):
        pol_area = input.area
    else:
        print("Sorry, not a polygon")        
        exit()
    return pol_area
 
print("Polygon area is " + str(getArea(poly1)))

----------------------------------

def getLength(input):
    if isinstance(input, Line):
        l_length = input.length
        print ("The length of your line is " + l_length)
    elif isinstance(input, polygon):
        pol_exter = input.exterior
        print ("The exterior of your polygon is " + pol_exter)
    else:
        print ("Error: LineString or Polygon geometries required!")

     

len = getLength(point1)
if lenght_pnt!=None:
    print ("The length of your line is " + str(len))

len = getLength(line1)
if lenght_pnt!=None:
    print ("The length of your line is " + str(len))

len = getLength(poly1)
if lenght_pnt!=None:
    print ("The length of your line is " + str(len))
         

-----------------------------------
-----------------------------------

import pandas as pd
df = pd.read_csv('-----------------/L1/travelTimes_2015_Helsinki.txt', sep=';', encoding='latin1')
#pd.set_option('max_columns',9)
#print(df.head(5))

def orig(row):
    return Point(row['from_x'], row['from_y'])

def dest(row):
    return Point(row['to_x'], row['to_y'])

df['orig_points'] = df.apply(orig, axis=1)
df['dest_points'] = df.apply(dest, axis=1)

print(df.head(5))
-----------------------------------
-----------------------------------

def lines(row): 
    return LineString(row['orig_points'], row['dest_points'])

def len(row):
    l_length = row['lines'].length


df['lines'] = df.apply(lines, axis=1)
df['length'] = df.apply(len, axis=1)
print("The average distance of all the origin-destination points is "+str(df.mean(axis=0, level='length')))














































